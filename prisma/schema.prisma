generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int          @id @default(autoincrement()) @map("id")
  nickname       String       @unique @map("nickname")
  password       String       @map("password")
  userName       String       @map("userName")
  matchesAsUser1 Matches[]    @relation("User1Matches")
  matchesAsUser2 Matches[]    @relation("User2Matches")
  UserAccount    UserAccount?
  UserElo        UserElo?
  userTeams      UserTeams[]

  @@map("Users")
}

model UserElo {
  id         Int   @id @default(autoincrement()) @map("id")
  userId     Int   @unique @map("userId")
  userRating Int   @map("userRating")
  user       Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserElo")
}

model UserAccount {
  id     Int   @id @default(autoincrement()) @map("id")
  userId Int   @unique @map("userId")
  cash   Int   @default(0) @map("cash")
  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserAccount")
}

model UserTeams {
  id             Int             @id @default(autoincrement()) @map("id")
  userId         Int             @map("userId")
  playerId       Int             @map("playerId")
  playerUpgrade  Int             @default(1) @map("playerUpgrade")
  isSquad        Boolean         @default(false) @map("isSquad")
  TransferMarket TransferMarket?
  players        Players         @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user           Users           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([playerId], map: "UserTeams_playerId_fkey")
  @@index([userId], map: "UserTeams_userId_fkey")
  @@map("UserTeams")
}

model Players {
  id          Int          @id @default(autoincrement()) @map("id")
  playerName  String       @map("playerName")
  playerStats PlayerStats?
  userTeams   UserTeams[]

  @@map("Players")
}

model TransferMarket {
  id          Int       @id @default(autoincrement()) @map("id")
  userTeamsId Int       @unique @map("userTeamsId")
  price       Int       @map("price")
  createAt    DateTime  @default(now()) @map("createdAt")
  userTeam    UserTeams @relation(fields: [userTeamsId], references: [id], onDelete: Cascade)

  @@map("TransferMarket")
}

model Matches {
  id           Int       @id @default(autoincrement()) @map("id")
  matchDate    DateTime  @default(now()) @map("matchDate")
  updatedAt    DateTime  @updatedAt @map("updatedAt")
  matchUserId1 Int       @map("matchUserId1")
  matchUserId2 Int       @map("matchUserId2")
  matchResult  WINRESULT @map("matchResult")
  user1        Users     @relation("User1Matches", fields: [matchUserId1], references: [id], onDelete: Cascade)
  user2        Users     @relation("User2Matches", fields: [matchUserId2], references: [id], onDelete: Cascade)

  @@index([matchUserId1], map: "Matches_matchUserId1_fkey")
  @@index([matchUserId2], map: "Matches_matchUserId2_fkey")
  @@map("Matches")
}

model PlayerStats {
  id        Int     @id @default(autoincrement()) @map("id")
  playerId  Int     @unique @map("playerId")
  technique Int     @default(0) @map("technique")
  pass      Int     @default(0) @map("pass")
  pace      Int     @default(0) @map("pace")
  agility   Int     @default(0) @map("agility")
  defense   Int     @default(0) @map("defense")
  finishing Int     @default(0) @map("finishing")
  stamina   Int     @default(0) @map("stamina")
  players   Players @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("PlayerStats")
}

model sessions {
  session_id String  @id @db.VarChar(128)
  expires    Int     @db.UnsignedInt
  data       String? @db.MediumText
}

enum WINRESULT {
  USER1WIN
  USER2WIN
  DRAW
}
