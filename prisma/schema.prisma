// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                Int        @id @default(autoincrement()) @map("id")
  nickname          String     @unique @map("nickname")
  password          String     @map("password")
  userName          String     @map("userName")

  UserAccount       UserAccount?
  UserElo           UserElo?
  userTeams         UserTeams[]
  matchesAsUser1    Matches[]  @relation("User1Matches")
  matchesAsUser2    Matches[]  @relation("User2Matches")  

  @@map("Users")
}

model UserElo {
  id                Int      @id @default(autoincrement()) @map("id")
  userId            Int      @unique       @map("userId")
  userRating        Int      @map("userRating")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@map("UserElo")
}

model UserAccount {
  id      Int      @id @default(autoincrement())   @map("id")
  userId  Int      @unique       @map("userId")
  cash    Int      @default(0)  @map("cash")

  user    Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("UserAccount")
}

model UserTeams {
  id             Int      @id @default(autoincrement())   @map("id")
  userId         Int      @map("userId")
  playerId       Int      @map("playerId")
  playerUpgrade  Int      @default(1) @map("playerUpgrade")
  isSquad        Boolean  @default(false) @map("isSquad")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  players Players @relation(fields: [playerId],references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("UserTeams")
}

model Players { 
  id                Int               @id @default(autoincrement())   @map("id")
  playerName        String            @map("playerName")

  userTeams         UserTeams[]
  playerStats       PlayerStats?       

  @@map("Players")
}

model TransferMarket {
  id        Int      @id @default(autoincrement())   @map("id")
  playerId  Int      @map("playerId")
  userId    Int      @map("userId")
  price     Int      @map("price")
  createAt  DateTime @default(now()) @map("createdAt")

  @@map("TransferMarket")
}

model Matches { 
  id                Int              @id @default(autoincrement()) @map("id")
  matchDate         DateTime         @default(now()) @map("matchDate")
  updatedAt         DateTime         @updatedAt  @map("updatedAt")
  matchUserId1      Int              @map("matchUserId1")
  matchUserId2      Int              @map("matchUserId2")
  matchResult       WINRESULT        @map("matchResult")

  user1             Users            @relation("User1Matches", fields: [matchUserId1], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user2             Users            @relation("User2Matches", fields: [matchUserId2], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Matches")
}

model PlayerStats {
  id          Int      @id @default(autoincrement()) @map("id")
  playerId    Int      @unique @map("playerId")
  technique   Int      @default(0)   @map("technique")
  pass        Int      @default(0)   @map("pass")
  agility     Int      @default(0)   @map("agility")
  defense     Int      @default(0)   @map("defense")
  finishing   Int      @default(0)   @map("finishing")
  stamina     Int      @default(0)   @map("stamina")

  players Players @relation(fields: [playerId], references: [id], onDelete: Cascade,onUpdate: Cascade)

  @@map("PlayerStats")
}

enum WINRESULT {
  USER1WIN
  USER2WIN
  DRAW
}
