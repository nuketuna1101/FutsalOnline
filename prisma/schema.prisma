// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                BigInt    @id @default(autoincrement()) @map("id")
  nickname          String    @unique @map("nickname")
  password          String    @map("password")
  userName          String    @map("userName")

  UserAccount       UserAccount?
  userTeams         UserTeams[]
  matchesAsUser1    Matches[]    @relation("User1Matches")
  matchesAsUser2    Matches[]    @relation("User2Matches")  

  @@map("Users")
}

model UserAccount {
  id      BigInt    @id @default(autoincrement())   @map("id")
  userId  BigInt    @unique       @map("userId")
  cash    BigInt    @default(0)  @map("cash")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("UserAccount")
}

model UserTeams {
  id        BigInt    @id @default(autoincrement())   @map("id")
  userId    BigInt    @map("userId")
  playerId  BigInt    @map("playerId")


  userSquads UserSquads[]
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  players Players @relation(fields: [playerId],references: [id], onDelete: Cascade, onUpdate: Cascade)


  @@map("UserTeams")
}

model UserSquads {
  id          BigInt    @id @default(autoincrement())   @map("id")
  userTeamId  BigInt    @map("userTeamId")
  
  userteam UserTeams @relation(fields: [userTeamId],references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@map("UserSquads")
}

model Players { 
  id                BigInt              @id @default(autoincrement())   @map("id")
  playerName        String              @map("playerName")

  userTeams         UserTeams[]
  playerStats       PlayerStats?       

  @@map("Players")
}


model Matches { 
  id                BigInt             @id @default(autoincrement()) @map("id")
  matchDate         DateTime        @default(now()) @map("matchDate")
  updatedAt         DateTime        @updatedAt  @map("updatedAt")
  matchUserId1      BigInt        @map("matchUserId1")
  matchUserId2      BigInt        @map("matchUserId2")
  matchResult       WINRESULT       @map("matchResult")

  user1             Users        @relation("User1Matches", fields: [matchUserId1], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user2             Users        @relation("User2Matches", fields: [matchUserId2], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Matches")
}


model PlayerStats {
  id          BigInt    @id @default(autoincrement()) @map("id")
  playerId    BigInt    @unique @map("playerId")
  technique   BigInt    @default(0)   @map("technique")
  pass        BigInt    @default(0)   @map("pass")
  agility     BigInt    @default(0)   @map("agility")
  defense     BigInt    @default(0)   @map("defense")
  finishing   BigInt    @default(0)   @map("finishing")
  stamina     BigInt    @default(0)   @map("stamina")

  players Players @relation(fields: [playerId], references: [id], onDelete: Cascade,onUpdate: Cascade)

  @@map("PlayerStats")
}

enum WINRESULT {
  USER1WIN
  USER2WIN
  DRAW
}
