// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id BigInt @id @default(autoincrement())
  nickname String @unique
  password String 
  userName String

  UserAccount UserAccount?
  userTeams UserTeams[]
  matches Matches[]
  

  @@map("Users")
}

model UserAccount {
  id BigInt @id @default(autoincrement())
  userId BigInt @unique
  cash BigInt @default(0)

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("UserAccount")
}

model UserTeams {
  id BigInt @id @default(autoincrement())
  userId BigInt 
  playerId BigInt


  userSquads UserSquads[]
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  players Players @relation(fields: [playerId],references: [id], onDelete: Cascade, onUpdate: Cascade)


  @@map("UserTeams")
}

model UserSquads {
  id  BigInt @id @default(autoincrement())
  userTeamId BigInt
  
  userteam UserTeams @relation(fields: [userTeamId],references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@map("UserSquads")
}

model Players { 
  id BigInt @id @default(autoincrement())
  playerName String @unique
  playerStatus BigInt

  userTeams UserTeams[]
  playerStatus1 playerStatus?


  @@map("Players")
}



model Matches { 
  id Int @id @default(autoincrement())
  matchDate DateTime @default(now())
  updatedAt DateTime @updatedAt
  matchUser1 BigInt 
  matchUser2 BigInt
  matchResult WINRESULT

  users Users @relation( fields: [matchUser1], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Matches")
}

model playerStatus {
  id BigInt @id @default(autoincrement())
  playerId BigInt @unique
  technique BigInt @default(0)
  pass BigInt @default(0)
  agility BigInt @default(0)
  defense BigInt @default(0)
  finishing BigInt @default(0)
  stamina BigInt @default(0)

  players Players @relation(fields: [playerId], references: [id], onDelete: Cascade,onUpdate: Cascade)

  @@map("playerStatus")
}

enum WINRESULT {
  USER1WIN
  USER2WIN
  DRAW
}